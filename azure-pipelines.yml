trigger:
    - main

resources:
    repositories:
        - repository: templatesalias
          type: git # using type: git for az devops repos , using type: github for github repos
          name: devops-templates
          ref: refs/heads/main #using main branch, is possible use tags and commit too

pool:
    name: "Default" # pool onde est√° o self-hosted agent
    demands:
        - agent.name -equals mylinuxagent

variables:
    - name: "solution"
      value: "*.sln"
    - name: "buildPlataform"
      value: "Any CPU"
    - name: "buildConfiguration"
      value: "Release"
    - group: "config-group" # have nickname and role variables
    - name: "myPassedVariable"
      value: $[variables.role]

jobs:
    - template: templates/validate-swag.yml
      parameters:
          jobName: "SwaggerValidation"
          pythonScriptPath: "scriptvalidate_swag.py"

    - template: hello.yml@templatesalias #templatealias is a ref for another repo
      parameters:
          jobName: "New_hello_job_name"
          userName: "John"

    - job: BuildAndDeploy
      displayName: "Build and Deploy Job"
      dependsOn: SwaggerValidation # depende do job anterior
      condition: succeeded() # e apenas se job anterior foi bem-sucedido
      steps:
          - task: UseDotNet@2
            displayName: "Install .Net SDK"
            inputs:
                packageType: "sdk"
                version: "8.x"

          - script: dotnet restore $(solution)
            displayName: "Restore solution"

          - script: dotnet build $(solution) --configuration $(buildConfiguration)
            displayName: "Build solution"

          - script: dotnet test $(solution) --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"
            displayName: "Test solution"

          # - task: Docker@2
          #   displayName: "Build and Push Docker Image"
          #   inputs:
          #     containerRegistry: "dockerhubconnection"
          #     repository: "lets2/weatherapi"
          #     command: "buildAndPush"
          #     Dockerfile: "**/Dockerfile"

          - script: |
                echo "------------------"
                echo "Pipeline finished!"
                echo "$(nickname) - $(myPassedVariable)!"
                echo "Pipeline finished!"
                echo "------------------"
            displayName: "Last step - echo message for $(nickname)"
